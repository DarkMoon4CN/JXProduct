using JXAPI.Component.DataAccess;
using log4net;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;

namespace JXAPI.Component.SQLServerDAL
{
    public class MySqlOrderDAL
    {
        private static Database dbr_Order = JXOrderMySqlData.Reader;
        private static Database dbr_Product = JXProductMySqlData.Reader;
        DatabaseType dbType_Update = DatabaseType.dbr_Product;
        DatabaseType dbType_Add = DatabaseType.dbr_Product;
        private ILog myLog = log4net.LogManager.GetLogger(typeof(MySqlOrderDAL));

        #region 订单信息表相关操作

        /// <summary>
        /// 查询需要添加列表
        /// </summary>
        /// <param name="productID">ID</param>
        /// <param name="updateTime">更新时间</param>
        /// <param name="pageSize">页面大小</param>
        /// <returns></returns>
        public DataTable GetAddList(int ID, string createTime, int pageSize, string tableName)
        {
            try
            {
                string time = string.Empty;
                if (!string.IsNullOrEmpty(createTime))
                {
                    time = string.Format(@" and CreateTime > '{0}'", createTime);
                }
                StringBuilder sqlCommand = new StringBuilder();
                switch (tableName.ToLower())
                {
                    case "orders":
                        sqlCommand.AppendFormat(@"select * from Orders ");
                        sqlCommand.Append(string.Format(" where OrderID > {0} ",ID));
                        sqlCommand.Append(time);
                        sqlCommand.AppendFormat(" ORDER BY OrderID");
                        dbType_Add = DatabaseType.dbr_Order;
                        break;
                    case "orderproduct":
                        sqlCommand.Append(string.Format("select * FROM {0} WHERE  OrderProductID > {1} ", tableName, ID));
                        sqlCommand.Append(time);
                        sqlCommand.AppendFormat(" ORDER BY OrderProductID");
                        dbType_Add = DatabaseType.dbr_Order;
                        break;
                    case "orderoperatelog":
                        sqlCommand.Append(string.Format("select * FROM {0} WHERE  LogID > {1} ", tableName, ID));
                        sqlCommand.Append(time);
                        sqlCommand.AppendFormat(" ORDER BY LogID");
                        dbType_Add = DatabaseType.dbr_Order;
                        break;
                    case "productoutbook":
                        sqlCommand.Append(string.Format("select * FROM {0} WHERE  OutID > {1} ", tableName, ID));
                        sqlCommand.Append(time);
                        sqlCommand.AppendFormat(" ORDER BY OutID");
                        dbType_Add = DatabaseType.dbr_Product;
                        break;
                    default:
                        break;
                }
                sqlCommand.AppendFormat(@" limit {0}", pageSize);
                DataSet dSet = new DataSet();
                switch (dbType_Add)
                {
                    case DatabaseType.dbr_Product:
                        var dbCommand1 = dbr_Product.GetSqlStringCommand(sqlCommand.ToString());
                        dSet = dbr_Product.ExecuteDataSet(dbCommand1);
                        break;
                    case DatabaseType.dbr_Order:
                        var dbCommand2 = dbr_Order.GetSqlStringCommand(sqlCommand.ToString());
                        dSet = dbr_Order.ExecuteDataSet(dbCommand2);
                        break;
                }
                return (dSet != null && dSet.Tables.Count > 0) ? dSet.Tables[0] : null;
            }
            catch (Exception ex)
            {
                myLog.ErrorFormat("GetAddProductList 查询需要添加的{0}表失败,ID:{1},异常信息:{2}", tableName, ID, ex.Message);
                return null;
            }
        }

        /// <summary>
        /// 查询需要更新的列表
        /// </summary>
        /// <param name="productInitID">需要更新的原始ID,即需要更新的最大ID</param>
        /// <param name="productNowID">当前更新到的ID</param>
        /// <param name="updateTime">更新时间</param>
        /// <param name="pageSize">页面大小</param>
        /// <returns></returns>
        public DataTable GetUpdateList(long MaxID, long NowID, string createTime, int pageSize, string tableName)
        {
            try
            {
                string time = string.Empty;
                if (!string.IsNullOrEmpty(createTime))
                {
                    time = string.Format(@" and CreateTime > '{0}'", createTime);
                }
                StringBuilder sqlCommand = new StringBuilder();
                switch (tableName.ToLower())
                {
                    case "orders":
                        sqlCommand.AppendFormat(@"select * from Orders ");
                        sqlCommand.Append(string.Format(" where OrderID > {0} AND OrderID <= {1} ", NowID, MaxID));
                        sqlCommand.Append(time);
                        sqlCommand.AppendFormat(" ORDER BY OrderID");
                        break;
                    case "orderproduct":
                        sqlCommand.Append(string.Format("select * FROM {0} WHERE  OrderProductID > {1} AND OrderProductID <= {2} ", tableName, NowID, MaxID));
                        sqlCommand.Append(time);
                        sqlCommand.AppendFormat(" ORDER BY OrderProductID");
                        break;
                    case "orderoperatelog":
                        sqlCommand.Append(string.Format("select * FROM {0} WHERE LogID > {1} AND LogID <= {2} ", tableName, NowID, MaxID));
                        sqlCommand.Append(time);
                        sqlCommand.AppendFormat(" ORDER BY LogID");
                        break;
                    case "productoutbook":
                        break;
                    default:
                        break;
                }
                sqlCommand.AppendFormat(@" limit {0}", pageSize);
                var dbCommand = dbr_Order.GetSqlStringCommand(sqlCommand.ToString());
                DataSet dSet = dbr_Order.ExecuteDataSet(dbCommand);
                return (dSet != null && dSet.Tables.Count > 0) ? dSet.Tables[0] : null;
            }
            catch (Exception ex)
            {
                myLog.ErrorFormat("GetUpdateProductList 查询需要更新的{0}表失败,ID:{0},异常信息:{1}", tableName, NowID, ex.Message);
                return null;
            }
        }

        #endregion
    }
}
