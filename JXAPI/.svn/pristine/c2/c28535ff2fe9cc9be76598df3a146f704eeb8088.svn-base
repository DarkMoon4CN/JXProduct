using System;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using System.Text;

using Venus;
using Venus.Utils;
using Venus.Parser;
using JXAPI.JXSdk.Utils;
using Newtonsoft.Json;

namespace JXAPI.JXSdk.Base
{
    /// <summary>
    /// 基于REST的Venus客户端。
    /// </summary>
    public class DefaultJXClient : IVenusClient
    {
        private string serverUrl;
        private string appKey;
        private string appSecret;
        private string source;

        private Venus.Utils.WebUtils webUtils;
        private Venus.Logger.IVenusLogger VenusLogger;
        private Venus.Logger.IVenusLogger ErrorLogger;

        public DefaultJXClient(string source)
        {
            this.source = source;
            this.appKey = Config.SecureConfigSection.Instance.Secures[source].APPKEY;
            this.appSecret = Config.SecureConfigSection.Instance.Secures[source].APPPWD;
            this.serverUrl = Config.SecureConfigSection.Instance.Secures[source].URL;

            this.webUtils = new WebUtils();
            this.VenusLogger = new Venus.Logger.ClientVenusLogger();
            this.ErrorLogger = new Venus.Logger.ErrorVenusLogeer();
        }

        #region IVenusClient Members

        public T Execute<T>(IVenusRequest<T> request) where T : VenusClientResponse
        {
            return Execute<T>(request, null, null);
        }

        public T Execute<T>(IVenusRequest<T> request, DateTime timestamp) where T : VenusClientResponse
        {
            return DoExecute<T>(request, null, null);
        }

        public T Execute<T>(IVenusRequest<T> request, string action, string postData) where T : VenusClientResponse
        {
            return DoExecute<T>(request, action, postData);
        }

        #endregion

        private T DoExecute<T>(IVenusRequest<T> request, string action, string postData) where T : VenusClientResponse
        {
            DateTime timestamp = DateTime.Now;
            //  提前检查业务参数
            try
            {
                request.Validate();
            }
            catch (VenusException e)
            {
                return CreateErrorResponse<T>(e.ErrorCode, e.ErrorMsg);
            }
            try
            {
                //  postData内插入基础数据、时间戳
                postData = postData.Insert(1, string.Format("{0}, \"timestamp\":{1},", Config.JXServiceConfig.ServiceBody, Utils.ConvertDataTimeHelper.ConvertDataTimeLong(timestamp)));

                //  生成签名
                string sign = SignUtil.SignVenusRequest(postData, appSecret).Replace("+", "%2B");
                
                //  发起请求
                string body = webUtils.DoPost(string.Format("{0}{1}?signature={2}", this.serverUrl, action, sign), postData);

                // 解释响应结果
                T rsp;
                IVenusParser<T> tp = new VenusJsonParser<T>();
                rsp = tp.Parse(body);

                // 追踪错误的请求
                if (rsp.IsError)
                {
                    ErrorLogger.Warn(string.Format("参数:{0},结果:{1}", postData, rsp.Body));
                }
                VenusLogger.Info(string.Format("method-{0}|start-{1}|end-{2}|result-{3}", action, timestamp.ToLongTimeString(), DateTime.Now.ToLongTimeString(), rsp.ErrCode));
                return rsp;
            }
            catch (Exception e)
            {
                ErrorLogger.Error(string.Format("参数:{0},结果:{1}", postData, e.Message));
                return CreateErrorResponse<T>("1000", e.Message);
            }
        }

        /// <summary>
        /// 错误信息
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="errCode"></param>
        /// <param name="errMsg"></param>
        /// <returns></returns>
        private T CreateErrorResponse<T>(string errCode, string errMsg) where T : VenusClientResponse
        {
            T rsp = Activator.CreateInstance<T>();
            rsp.ErrCode = errCode;
            rsp.ErrMsg = errMsg;

            IDictionary<string, object> errObj = new Dictionary<string, object>();
            errObj.Add("code", errCode);
            errObj.Add("msg", errMsg);
            IDictionary<string, object> root = new Dictionary<string, object>();
            root.Add("error_response", errObj);

            string body = JsonConvert.SerializeObject(root);
            rsp.Body = body;
            
            return rsp;
        }
    }
}
