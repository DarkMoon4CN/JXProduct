using JXAPI.Component.DataAccess;
using log4net;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Data;

namespace JXAPI.Component.SQLServerDAL
{
    public class OrderOperateLogMySqlDAL
    {
        private static Database dbw = JXOrderMySqlData.Writer;
        private static Database dbr = JXOrderMySqlData.Reader;
        private ILog myLog = log4net.LogManager.GetLogger(typeof(OrderOperateLogMySqlDAL));

        public int GetMaxOrderOperateLogID()
        {
            int maxId = 0;
            try
            {
                string sqlCommand = "select * from OrderOperateLog order by LogID DESC limit 0, 1";
                var cmd = dbr.GetSqlStringCommand(sqlCommand);
                if (dbr.ExecuteScalar(cmd).IsNotNULL())
                {
                    maxId = Convert.ToInt32(dbr.ExecuteScalar(cmd));
                }
                else
                {
                    maxId = 0;
                }
            }
            catch (Exception ex)
            {
                myLog.ErrorFormat("GetMaxOrderOperateLogID 获取订单操作日志表最大ID失败,异常信息:{0}", ex.Message);
                maxId = -1;
            }
            return maxId;
        }

        /// <summary>
        /// 更新订单操作日志表
        /// </summary>
        /// <param name="productTable"></param>
        /// <param name="errorCount"></param>
        /// <returns></returns>
        public bool UpdateOrderOperateLog(DataTable productTable, out int errorCount)
        {
            var flag = true;
            errorCount = 0;
            try
            {
                string strPlaceholder = string.Empty;
                StringBuilder sqlCommand = new StringBuilder();
                sqlCommand.Append("replace into OrderOperateLog ( " + parmsKey + " ) values ");
                for (int i = 0; i < productTable.Rows.Count; i++)
                {
                    var dr = productTable.Rows[i];
                    var Placeholder = string.Format(@"('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}')",
                                     dr["LogID"].ToInt(), dr["OrderNO"].ToInt(), dr["UID"].ToInt(), dr["UserType"].ToShort(), dr["UserName"].ToString().Replace("\'", "\""), dr["Tittle"].ToString().Replace("\'", "\""), dr["Content"].ToString().Replace("\'", "\""), dr["OldStatus"].ToShort()
                                                  , dr["NewStatus"].ToShort(), dr["CreateTimeEx"].ToDateTime().ToString(), dr["Status"].ToShort());
                    if (i == 0)
                    {
                        strPlaceholder = Placeholder;
                    }
                    else
                    {
                        strPlaceholder += "," + Placeholder;
                    }
                }
                if (!string.IsNullOrEmpty(strPlaceholder))
                {
                    sqlCommand.Append(strPlaceholder);
                    var cmd = dbw.GetSqlStringCommand(sqlCommand.ToString().Replace("\\", "\\\\"));
                    var result = dbw.ExecuteNonQuery(cmd);
                    if (result <= 0)
                    {
                        errorCount = productTable.Rows.Count;
                        flag = false;
                        myLog.ErrorFormat("UpdateOrderOperateLog 更新订单操作日志失败,订单操作日志ID：{0}-{1},失败数:{2}", productTable.Rows[0]["LogID"], productTable.Rows[productTable.Rows.Count - 1]["LogID"], errorCount);
                    }
                    else
                    {
                        if (result != productTable.Rows.Count)
                        {
                            errorCount = (productTable.Rows.Count - result > 0) ? productTable.Rows.Count - result : 0; ;
                            flag = false;
                            myLog.ErrorFormat("UpdateOrderOperateLog 更新订单操作日志失败,订单操作日志ID：{0}-{1},失败数:{2}", productTable.Rows[0]["LogID"], productTable.Rows[productTable.Rows.Count - 1]["LogID"], errorCount);
                        }
                        else
                        {
                            errorCount = 0;
                            flag = true;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                myLog.ErrorFormat("UpdateOrderOperateLog 更新订单操作日志表失败,订单操作日志ID：{0}-{1},异常信息:{2}", productTable.Rows[0]["LogID"], productTable.Rows[productTable.Rows.Count - 1]["LogID"], ex.Message);
                flag = false;
            }
            return flag;
        }

        /// <summary>
        /// 添加订单操作日志表
        /// </summary>
        /// <param name="productTable"></param>
        /// <param name="errorCount"></param>
        /// <returns></returns>
        public bool AddOrderOperateLog(DataTable productTable, out int errorCount)
        {
            var flag = true;
            errorCount = 0;
            try
            {
                string strPlaceholder = string.Empty;
                StringBuilder sqlCommand = new StringBuilder();
                sqlCommand.Append("insert into OrderOperateLog ( " + parmsKey + " ) values ");
                for (int i = 0; i < productTable.Rows.Count; i++)
                {
                    var dr = productTable.Rows[i];
                    var Placeholder = string.Format(@"('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}')",
                                     dr["LogID"].ToInt(), dr["OrderNO"].ToInt(), dr["UID"].ToInt(), dr["UserType"].ToShort(), dr["UserName"].ToString().Replace("\'", "\""), dr["Tittle"].ToString().Replace("\'", "\""), dr["Content"].ToString().Replace("\'", "\""), dr["OldStatus"].ToShort()
                                                  , dr["NewStatus"].ToShort(), dr["CreateTime"].ToDateTime().ToString(), dr["Status"].ToShort());
                    if (i == 0)
                    {
                        strPlaceholder = Placeholder;
                    }
                    else
                    {
                        strPlaceholder += "," + Placeholder;
                    }
                }
                if (!string.IsNullOrEmpty(strPlaceholder))
                {
                    sqlCommand.Append(strPlaceholder);
                    var cmd = dbw.GetSqlStringCommand(sqlCommand.ToString().Replace("\\", "\\\\"));
                    var result = dbw.ExecuteNonQuery(cmd);
                    if (result <= 0)
                    {
                        errorCount = productTable.Rows.Count;
                        flag = false;
                        myLog.ErrorFormat("AddOrderOperateLog 添加订单操作日志失败,订单操作日志ID：{0}-{1},失败数:{2}", productTable.Rows[0]["LogID"], productTable.Rows[productTable.Rows.Count - 1]["LogID"], errorCount);
                    }
                    else
                    {
                        if (result != productTable.Rows.Count)
                        {
                            errorCount = (productTable.Rows.Count - result > 0) ? productTable.Rows.Count - result : 0; ;
                            flag = false;
                            myLog.ErrorFormat("AddOrderOperateLog 添加订单操作日志失败,订单操作日志ID：{0}-{1},失败数:{2}", productTable.Rows[0]["LogID"], productTable.Rows[productTable.Rows.Count - 1]["LogID"], errorCount);
                        }
                        else
                        {
                            errorCount = 0;
                            flag = true;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                myLog.ErrorFormat("AddOrderOperateLog 添加订单操作日志失败,订单操作日志ID：{0}-{1},异常信息:{2}", productTable.Rows[0]["LogID"], productTable.Rows[productTable.Rows.Count - 1]["LogID"], ex.Message);
                flag = false;
            }
            return flag;
        }

        private string parmsKey = string.Format(@"LogID,OrderID, UID,UserType,UserName,Tittle,Content,OldStatus
                                                  ,NewStatus,CreateTime,Status");
    }
}
