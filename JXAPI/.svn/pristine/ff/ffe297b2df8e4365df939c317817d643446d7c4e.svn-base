using JXAPI.Common.Utils;
using JXAPI.Component.DataAccess;
using JXAPI.Component.Model;
using log4net;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;

namespace JXAPI.Component.SQLServerDAL
{
    public class BrandMySqlDAL
    {
        private static Database dbw = JXProductMySqlData.Writer;
        private static Database dbr = JXProductMySqlData.Reader;
        private ILog myLog = log4net.LogManager.GetLogger(typeof(BrandMySqlDAL));

        #region MySql品牌信息相关操作

        public int GetMaxBrandID()
        {
            int maxId = 0;
            try
            {
                string sqlCommand = "select * from Brand order by BrandID DESC limit 0, 1";
                var cmd = dbr.GetSqlStringCommand(sqlCommand);
                if (dbr.ExecuteScalar(cmd).IsNotNULL())
                {
                    maxId = Convert.ToInt32(dbr.ExecuteScalar(cmd));
                }
                else
                {
                    maxId = 0;
                }
            }
            catch (Exception ex)
            {
                myLog.ErrorFormat("GetMaxBrandID 获取品牌信息最大ID失败,异常信息:{0}", ex.Message);
                maxId = -1;
            }
            return maxId;
        }

        public bool UpdateBrand(DataTable table, out int errorCount)
        {
            var flag = true;
            errorCount = 0;
            try
            {
                string strPlaceholder = string.Empty;
                StringBuilder sqlCommand = new StringBuilder();
                sqlCommand.Append("replace into Brand ( " + parmsKey + " ) values ");
                for (int i = 0; i < table.Rows.Count; i++)
                {
                    var dr = table.Rows[i];
                    var Placeholder = string.Format(@"({0},'{1}','{2}','{3}','{4}','{5}','{6}',{7},'{8}','{9}',{10},'{11}',{12},{13},'{14}','{15}','{16}','{17}',{18},{19})",
                 dr["BrandID"].ToInt(), dr["ChineseName"].ToString().Replace("\'", "\""), dr["PinyinName"].ToString().Replace("\'", "\""), dr["FirstLetter"].ToString().Replace("\'", "\"")
                 , dr["EnglishName"].ToString().Replace("\'", "\""), dr["RegTrademark"].ToString().Replace("\'", "\""), dr["UnregTrademark"].ToString().Replace("\'", "\""), dr["BrandType"].ToShort()
                 , dr["ImageLogo"].ToString().Replace("\'", "\""), dr["ImageBanner"].ToString().Replace("\'", "\""), dr["Level"].ToShort(), dr["Path"].ToString().Replace("\'", "\"")
                 , dr["ParentID"].ToInt(), dr["PathCount"].ToShort(), dr["Title"].ToString().Replace("\'", "\""), dr["Keywords"].ToString().Replace("\'", "\"")
                 , dr["Description"].ToString().Replace("\'", "\""), dr["MetaDescription"].ToString().Replace("\'", "\""), dr["Sort"].ToInt(), dr["Status"].ToShort());
                    if (i == 0)
                    {
                        strPlaceholder = Placeholder;
                    }
                    else
                    {
                        strPlaceholder += "," + Placeholder;
                    }
                }
                if (!string.IsNullOrEmpty(strPlaceholder))
                {
                    sqlCommand.Append(strPlaceholder);
                    var cmd = dbw.GetSqlStringCommand(sqlCommand.ToString());
                    var result = dbw.ExecuteNonQuery(cmd);
                    if (result <= 0)
                    {
                        errorCount = table.Rows.Count;
                        flag = false;
                    }
                    else
                    {
                        errorCount = (table.Rows.Count - result > 0) ? table.Rows.Count - result : 0;
                        if (errorCount == 0)
                        {
                            flag = true;
                        }
                        else
                        {
                            flag = false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                myLog.ErrorFormat("UpdateBrand 更新品牌信息表失败,品牌信息ID：{0}-{1},异常信息:{2}", table.Rows[0]["BrandID"], table.Rows[table.Rows.Count - 1]["BrandID"], ex.Message);
                flag = false;
            }
            return flag;
        }

        public bool AddBrand(DataTable table, out int errorCount)
        {
            var flag = true;
            errorCount = 0;
            try
            {
                string strPlaceholder = string.Empty;
                StringBuilder sqlCommand = new StringBuilder();
                sqlCommand.Append("insert into Brand ( " + parmsKey + " ) values ");
                for (int i = 0; i < table.Rows.Count; i++)
                {
                    var dr = table.Rows[i];
                    var Placeholder = string.Format(@"({0},'{1}','{2}','{3}','{4}','{5}','{6}',{7},'{8}','{9}',{10},'{11}',{12},{13},'{14}','{15}','{16}','{17}',{18},{19})",
                                     dr["BrandID"].ToInt(), dr["ChineseName"].ToString().Replace("\'", "\""), dr["PinyinName"].ToString().Replace("\'", "\""), dr["FirstLetter"].ToString().Replace("\'", "\"")
                                     , dr["EnglishName"].ToString().Replace("\'", "\""), dr["RegTrademark"].ToString().Replace("\'", "\""), dr["UnregTrademark"].ToString().Replace("\'", "\""), dr["BrandType"].ToShort()
                                     , dr["ImageLogo"].ToString().Replace("\'", "\""), dr["ImageBanner"].ToString().Replace("\'", "\""), dr["Level"].ToShort(), dr["Path"].ToString().Replace("\'", "\"")
                                     , dr["ParentID"].ToInt(), dr["PathCount"].ToShort(), dr["Title"].ToString().Replace("\'", "\""), dr["Keywords"].ToString().Replace("\'", "\"")
                                     , dr["Description"].ToString().Replace("\'", "\""), dr["MetaDescription"].ToString().Replace("\'", "\""), dr["Sort"].ToInt(), dr["Status"].ToShort());
                    if (i == 0)
                    {
                        strPlaceholder = Placeholder;
                    }
                    else
                    {
                        strPlaceholder += "," + Placeholder;
                    }
                }
                if (!string.IsNullOrEmpty(strPlaceholder))
                {
                    sqlCommand.Append(strPlaceholder);
                    var cmd = dbw.GetSqlStringCommand(sqlCommand.ToString());
                    var result = dbw.ExecuteNonQuery(cmd);
                    if (result <= 0)
                    {
                        errorCount = table.Rows.Count;
                        flag = false;
                    }
                    else
                    {
                        errorCount = (table.Rows.Count - result > 0) ? table.Rows.Count - result : 0;
                        if (errorCount == 0)
                        {
                            flag = true;
                        }
                        else
                        {
                            flag = false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                myLog.ErrorFormat("AddCoupon 添加品牌信息失败,品牌信息ID：{0}-{1},异常信息:{2}", table.Rows[0]["BrandID"], table.Rows[table.Rows.Count - 1]["BrandID"], ex.Message);
                flag = false;
            }
            return flag;
        }

        
        private string parmsKey = string.Format(@"BrandID,ChineseName,PinyinName, FirstLetter,EnglishName,RegTrademark,UnregTrademark,BrandType,ImageLogo,ImageBanner,Level,Path,ParentID,
                                                PathCount,Title,Keywords,Description,MetaDescription,Sort,Status");

        #endregion
    }
}
