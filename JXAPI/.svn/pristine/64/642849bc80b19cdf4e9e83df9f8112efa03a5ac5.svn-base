using JXAPI.Component.DataAccess;
using log4net;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;

namespace JXAPI.Component.SQLServerDAL
{
    public class SqlDAL
    {
        private static Database dbr_Product = JXProductData.Reader;
        private static Database dbr_Marketing = JXMarketingData.Reader;
        private static Database dbr_CouponBase = JXCouponBaseData.Reader;
        private static Database dbr_YX = JXYXData.Reader;
        private ILog myLog = log4net.LogManager.GetLogger(typeof(SqlDAL));
        DatabaseType dbType_Update = DatabaseType.dbr_Product;
        DatabaseType dbType_Add = DatabaseType.dbr_Product;
        #region CURD

        /// <summary>
        /// 查询需要添加列表
        /// </summary>
        /// <param name="productID">ID</param>
        /// <param name="updateTime">更新时间</param>
        /// <param name="pageSize">页面大小</param>
        /// <returns></returns>
        public DataTable GetAddList(int ID, string updateTime, int pageSize, string tableName)
        {
            try
            {
                StringBuilder sqlCommand =   new StringBuilder(string.Format("SELECT TOP {0} * FROM {1} WHERE 1=1 ", pageSize, tableName));
                switch (tableName.ToLower())
                {
                    case "coupon":
                        sqlCommand.Append(string.Format(" AND ID > {0} and EndTime> '{1}'  ORDER BY ID", ID, DateTime.Now));
                        dbType_Add = DatabaseType.dbr_CouponBase;
                        break;
                    case "couponbatch":
                        sqlCommand.Append(string.Format(" AND ID > {0}  ORDER BY ID", ID));
                        dbType_Add = DatabaseType.dbr_CouponBase;
                        break;
                    case "couponchannel":
                        sqlCommand.Append(string.Format(" AND ChannelID > {0}  ORDER BY ChannelID", ID));
                        dbType_Add = DatabaseType.dbr_CouponBase;
                        break;
                    case "coupontype":
                        sqlCommand.Append(string.Format(" AND TypeID > {0}  ORDER BY TypeID", ID));
                        dbType_Add = DatabaseType.dbr_CouponBase;
                        break;
                    case "couponshoppingcard":
                        sqlCommand.Append(string.Format(" AND CouponID > {0}  ORDER BY CouponID", ID));
                        dbType_Add = DatabaseType.dbr_CouponBase;
                        break;
                    case "couponshoppingcarddetail":
                        sqlCommand.Append(string.Format(" AND CardDetailID > {0}  ORDER BY CardDetailID", ID));
                        dbType_Add = DatabaseType.dbr_CouponBase;
                        break;
                    case "searchkeywords":
                        sqlCommand.Append(string.Format(" AND KeywordID > {0}  ORDER BY KeywordID", ID));
                        dbType_Add = DatabaseType.dbr_YX;
                        break;
                    default:
                        break;
                }
                DataSet dSet = new DataSet();
                switch (dbType_Add)
                {
                    case DatabaseType.dbr_YX:
                        var dbCommand1 = dbr_Marketing.GetSqlStringCommand(sqlCommand.ToString());
                        dSet = dbr_YX.ExecuteDataSet(dbCommand1);
                        break;
                    case DatabaseType.dbr_CouponBase:
                        var dbCommand2 = dbr_CouponBase.GetSqlStringCommand(sqlCommand.ToString());
                        dSet = dbr_CouponBase.ExecuteDataSet(dbCommand2);
                        break;
                    case DatabaseType.dbr_Marketing:
                        var dbCommand3 = dbr_Marketing.GetSqlStringCommand(sqlCommand.ToString());
                        dSet = dbr_Marketing.ExecuteDataSet(dbCommand3);
                        break;
                }
                return (dSet != null && dSet.Tables.Count > 0) ? dSet.Tables[0] : null;
            }
            catch (Exception ex)
            {
                myLog.ErrorFormat("GetAddList 查询需要添加的{0}表失败,ID:{1},异常信息:{2}", tableName, ID, ex.Message);
                return null;
            }
        }

        /// <summary>
        /// 查询需要更新的列表
        /// </summary>
        /// <param name="productInitID">需要更新的原始ID,即需要更新的最大ID</param>
        /// <param name="productNowID">当前更新到的ID</param>
        /// <param name="updateTime">更新时间</param>
        /// <param name="pageSize">页面大小</param>
        /// <returns></returns>
        public DataTable GetUpdateList(int MaxID, int NowID, string updateTime, int pageSize, string tableName)
        {
            try
            {
                StringBuilder sqlCommand = new StringBuilder(string.Format("SELECT TOP {0} * FROM {1} WHERE 1=1 ", pageSize, tableName));
                switch (tableName.ToLower())
                {
                    case "coupon":
                    case "couponbatch":
                        sqlCommand.Append(string.Format(" AND ID > {0} AND ID <= {1} ORDER BY ID", NowID, MaxID));
                        dbType_Update = DatabaseType.dbr_CouponBase;
                        break;
                    case "couponchannel":
                        sqlCommand.Append(string.Format(" AND ChannelID > {0} AND ChannelID <= {1}  ORDER BY ChannelID", NowID, MaxID));
                        dbType_Update = DatabaseType.dbr_CouponBase;
                        break;
                    case "coupontype":
                        sqlCommand.Append(string.Format(" AND TypeID > {0} AND TypeID <= {1}  ORDER BY TypeID", NowID, MaxID));
                        dbType_Update = DatabaseType.dbr_CouponBase;
                        break;
                    case "couponshoppingcard":
                        sqlCommand.Append(string.Format(" AND CouponID > {0} AND CouponID <= {1}  ORDER BY CouponID", NowID, MaxID));
                        dbType_Update = DatabaseType.dbr_CouponBase;
                        break;
                    case "couponshoppingcarddetail":
                        sqlCommand.Append(string.Format(" AND CardDetailID > {0} AND CardDetailID <= {1}  ORDER BY CardDetailID", NowID, MaxID));
                        dbType_Update = DatabaseType.dbr_CouponBase;
                        break;
                    case "searchkeyword":
                        sqlCommand.Append(string.Format(" AND KeywordID > {0} AND KeywordID <= {1}  ORDER BY KeywordID", NowID, MaxID));
                        dbType_Update = DatabaseType.dbr_YX;
                        break;
                    default:
                        break;
                }
                DataSet dSet = new DataSet();
                switch (dbType_Update)
                {
                    case DatabaseType.dbr_YX:
                        var dbCommand1 = dbr_Marketing.GetSqlStringCommand(sqlCommand.ToString());
                        dSet = dbr_YX.ExecuteDataSet(dbCommand1);
                        break;
                    case DatabaseType.dbr_CouponBase:
                        var dbCommand2 = dbr_CouponBase.GetSqlStringCommand(sqlCommand.ToString());
                        dSet = dbr_CouponBase.ExecuteDataSet(dbCommand2);
                        break;
                }
                return (dSet != null && dSet.Tables.Count > 0) ? dSet.Tables[0] : null;
            }
            catch (Exception ex)
            {
                myLog.ErrorFormat("GetUpdateList 查询需要更新的{0}表失败,ID:{0},异常信息:{1}", tableName, NowID, ex.Message);
                return null;
            }
        }

        #endregion

        /// <summary>
        /// 关键词列表
        /// </summary>
        /// <param name="strWhere">条件</param>
        /// <returns></returns>
        public DataTable Keyword_GetListForSearch(string strWhere)
        {
            string sqlCommand = "Keyword_GetListForSearch";
            var dbCommand = dbr_Product.GetStoredProcCommand(sqlCommand);
            dbr_Product.AddInParameter(dbCommand, "strWhere", DbType.String, strWhere);
            DataSet dSet = dbr_Product.ExecuteDataSet(dbCommand);
            return (dSet != null && dSet.Tables.Count > 0) ? dSet.Tables[0] : null;
        }

    }

    enum DatabaseType
    {
        dbr_Product = 1,
        dbr_Marketing,
        dbr_CouponBase,
        dbr_YX,
    }
}
