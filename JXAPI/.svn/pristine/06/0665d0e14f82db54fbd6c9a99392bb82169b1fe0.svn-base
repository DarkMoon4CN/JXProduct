using com.igetui.api.openservice;
using com.igetui.api.openservice.igetui;
using com.igetui.api.openservice.igetui.template;
using com.igetui.api.openservice.payload;
using JXAPI.QueuePush.BLL;
using JXAPI.Component.Enums;
using JXAPI.Component.Model;
using JXAPI.Component.Utils;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Messaging;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Threading;
using JXAPI.Component.BLL;
using JXAPI.JXSdk.Response;

namespace JXAPI.QueuePush
{
    public partial class MainForm : Form
    {
        #region 个推参数
        private static string APPID = "gorAbOpJHb7DknzkVhx8W6";                     //您应用的AppId
        private static string APPKEY = "hkwvC1Ld0kAOKscmVkYaj8";                    //您应用的AppKey
        private static string MASTERSECRET = "5OQ8fqJEOd6e6fAHfflPA1";              //您应用的MasterSecret 
        //private static string CLIENTID = "";        //您获取的clientID
        //private static String CLIENTID1 = "";
        //private static string ALIAS = "请输入别名";
        //private static string ALIAS1 = "别名1";
        private static string HOST = "http://sdk.open.api.igexin.com/apiex.htm";    //HOST：OpenService接口地址
        //private static string DeviceToken = "";  //填写IOS系统的DeviceToken
        #endregion
        public static string queueName = "PushQueue";   //队列名，和JXAPI需一样

        public MainForm()
        {
            InitializeComponent();
        }

        #region 队列相关

        #region 创建队列 QueueCreate
        /// <summary>
        /// 创建队列
        /// </summary>
        /// <param name="queueName">队列名</param>
        private void QueueCreate()
        {
            string path = ".\\private$\\"+queueName;
            if (!System.Messaging.MessageQueue.Exists(path))
            {
                if (!System.Messaging.MessageQueue.Exists(path))
                {
                    System.Messaging.MessageQueue.Create(path, false);
                    System.Messaging.MessageQueue mqTemp = new System.Messaging.MessageQueue(path);
                    mqTemp.SetPermissions("Everyone", System.Messaging.MessageQueueAccessRights.FullControl);
                }
            }
        }
        #endregion

        #region 发送队列
        public void Send(PushMessageInfo pushMessageInfo) 
        {
            MessageQueue MyQueue = new MessageQueue(".\\private$\\" + queueName);
            MessageQueueTransaction myTransaction = new MessageQueueTransaction();
            try
            {
                //发送
                System.Messaging.Message msg = new System.Messaging.Message();
                msg.Formatter = new XmlMessageFormatter(new Type[] { typeof(PushMessageInfo) });
                MyQueue.Send(pushMessageInfo);
            }
            catch (MessageQueueException ex)
            {

            }

        }
        #endregion

        #region 队列 （异步）
        public void Receive()
        {
            //Receive         
            MessageQueue mq = new MessageQueue(".\\private$\\" + queueName);
            mq.Formatter = new XmlMessageFormatter(new Type[] { typeof(PushMessageInfo) });
            mq.ReceiveCompleted += new ReceiveCompletedEventHandler(MyReceiveCompleted);
            mq.BeginReceive();
        }
        void MyReceiveCompleted(object sender, ReceiveCompletedEventArgs e) 
        {
            MessageQueue mq = sender as MessageQueue;
            try
            {
                if (null != mq)
                {
                    System.Messaging.Message me = mq.EndReceive(e.AsyncResult);
                    if (null != me.Body)
                    {
                        PushMessageInfo pushMessageInfo = me.Body as PushMessageInfo;
                        
                        //推送
                        if (pushMessageInfo.PushType == "app")
                        {
                            pushMessageToApp(pushMessageInfo);
                        }
                        else
                        {
                            PushMessageToList(pushMessageInfo);
                        }
                        this.notifyIcon1.ShowBalloonTip(1, "提示", "推送已完成推送类型："+pushMessageInfo.PushType+",内容："+pushMessageInfo.Contents, ToolTipIcon.Info);

                    }
                    mq.BeginReceive();
                }
            }
            catch (Exception mes)
            {
                mq.EndReceive(e.AsyncResult);
            }  
        }
        #endregion
        #endregion

        #region 多人发送 个推信息
        /// <summary>
         /// 1-多人发送 个推信息
         /// </summary>
         /// <param name="pushMessageInfo"></param>
        private static void PushMessageToList(PushMessageInfo pushMessageInfo)
        {
            IGtPush push = new IGtPush(HOST, APPKEY, MASTERSECRET);
            string content = pushMessageInfo.Contents;
            string title = string.Empty;
            var transmissionContent =
            new
            {
                Template = pushMessageInfo.Template,
                Content = pushMessageInfo.Contents,
                Url = pushMessageInfo.Url,
                Section =pushMessageInfo.TypeID+"/"+ pushMessageInfo.Section,
                NodeId = pushMessageInfo.DataID
            };

            string jsonContent = JsonHelper.ConvertToJson(transmissionContent);
            ListMessage message = new ListMessage();
            if (pushMessageInfo.TypeID!=0)
            {
                title = Enum.GetName(typeof(SectionSecondType), pushMessageInfo.Section);
            }
            //透传模板
            TransmissionTemplate template = TransmissionTemplateDemo(content, title, jsonContent);
            template.TransmissionType = "1";    //应用启动类型，1：强制应用启动 2：等待应用启动
            template.TransmissionContent =jsonContent;  //透传内容
            message.IsOffline = true;
            message.OfflineExpireTime = 1000 * 3600 * 12;
            message.Data = template;
            //设置接收者
            List<com.igetui.api.openservice.igetui.Target> targetList = new List<com.igetui.api.openservice.igetui.Target>();

            if (pushMessageInfo.TargetList.IndexOf(",") == -1)
            {
                pushMessageInfo.TargetList += ",";
            }
            string[] targets = pushMessageInfo.TargetList.Split(',');
            for (int i = 0; i < targets.Length; i++)
            {
                if (targets[i] != null || targets[i] != string.Empty)
                {
                    com.igetui.api.openservice.igetui.Target target = new com.igetui.api.openservice.igetui.Target();
                    target.appId = APPID;
                    target.alias = targets[0];

                    #region 判定是否允许推送，并向java接口写入推送信息
                     //判定推送者（IOS）是否允许推送
                    bool isSwitch = false;
                    MessagesAddBLL pushBLL = new MessagesAddBLL();
                    MessagesAddRequest maRequest = new MessagesAddRequest();
                    maRequest.creator = "推送程序";
                    maRequest.userID =Convert.ToInt32(target.alias);
                    maRequest.status = 0;
                    if (pushMessageInfo.Template == 1)
                    {
                        maRequest.contents = pushMessageInfo.Contents;
                    }
                    else
                    {
                        maRequest.contents = pushMessageInfo.Url;
                    }
                    if (pushMessageInfo.TypeID != 0)
                    {
                      maRequest.typeID = pushMessageInfo.TypeID;
                    }

                    //IOS
                    if (pushMessageInfo.ChannelID ==1 || pushMessageInfo.ChannelID==0)
                    {
                        NotifyConfigGetBLL notifyConfigGetBLL = new NotifyConfigGetBLL();
                        NotifyConfigGetRequest request = new NotifyConfigGetRequest();
                        request.userID = maRequest.userID;
                        request.userPlatform = 3;
                        NotifyConfigGetResponse ncgResponse = notifyConfigGetBLL.NotityConfigGet(request);
                        //转化为2进制字符串后换算出是否推送
                        string allStatus = Convert.ToString(ncgResponse.notifyConfig.notifySwitch, 2);

                        if (allStatus != "0")
                        {
                            string status = allStatus.Substring(maRequest.typeID - 1, 1);
                            if (status == "0")
                            {
                                isSwitch = true;
                            }
                        }
                    }
                    if (isSwitch)//允许推送
                    {
                        pushBLL.MessagesAdd(maRequest);
                        targetList.Add(target);
                    }
                    #endregion
                }
            }
            if (targetList == null || targetList.Count == 0)
            {
                return;
            }
            string contentId = push.getContentId(message);
            string pushResult = push.pushMessageToList(contentId, targetList);
        }
        #endregion

        #region 向某个app应用内发送
        /// <summary>
        /// 向 某个app应用 内全部发送
        /// </summary>
        /// <param name="pushMessageInfo"></param>
        public void pushMessageToApp(PushMessageInfo pushMessageInfo)
        {
            IGtPush push = new IGtPush(HOST, APPKEY, MASTERSECRET);
            string content = pushMessageInfo.Contents;
            string title = string.Empty;
            var transmissionContent =
                        new
                        {
                            Template = pushMessageInfo.Template,
                            Content = pushMessageInfo.Contents,
                            Url = pushMessageInfo.Url,
                            Section = pushMessageInfo.TypeID + "/" + pushMessageInfo.Section,
                            NodeId = pushMessageInfo.DataID
                        };
            string jsonContent = JsonHelper.ConvertToJson(transmissionContent);
            if (pushMessageInfo.TypeID != 0)
            {
                title = Enum.GetName(typeof(SectionSecondType), pushMessageInfo.Section);
            }
            //透传模板
            TransmissionTemplate template = TransmissionTemplateDemo(content, title, jsonContent);
            template.TransmissionType = "1";
            template.TransmissionContent = jsonContent; //透传内容
            AppMessage message = new AppMessage();
            message.IsOffline = true;
            message.OfflineExpireTime = 1000 * 3600 * 12;
            message.Data = template;
            //message.PushNetWorkType = 0;           
            //message.Speed = 1;

            List<string> appIdList = new List<string>();
            appIdList.Add(APPID);

            List<string> phoneTypeList = new List<string>();
            phoneTypeList.Add("ANDROID");
            phoneTypeList.Add("IOS");
            List<string> provinceList = new List<string>();
            //provinceList.Add("浙江");
            //provinceList.Add("上海");
            //provinceList.Add("北京");

            List<string> tagList = new List<string>();
            //agList.Add("测试");

            message.AppIdList = appIdList;
            message.PhoneTypeList = phoneTypeList;
            //message.ProvinceList = provinceList;
            //message.TagList = tagList;
            string pushResult = push.pushMessageToApp(message);

        }
         #endregion

        #region 线上使用透传模板
        /// <summary>
        /// 透传 正式使用
        /// </summary>
        /// <returns></returns>
        public static TransmissionTemplate TransmissionTemplateDemo(string content, string title,string jsonContent)
        {
            TransmissionTemplate template = new TransmissionTemplate();
            template.AppId = APPID;
            template.AppKey = APPKEY;
            template.TransmissionType = "1";    //应用启动类型，1：强制应用启动 2：等待应用启动
            template.TransmissionContent = "";  //透传内容
            //iOS简单推送
            //APNPayload apnpayload = new APNPayload();
            //SimpleAlertMsg alertMsg = new SimpleAlertMsg("alertMsg");
            //apnpayload.AlertMsg = alertMsg;
            //apnpayload.Badge = 11;
            //apnpayload.ContentAvailable = 1;
            //apnpayload.Category = "";
            //apnpayload.Sound = "";
            //apnpayload.addCustomMsg("", "");
            //template.setAPNInfo(apnpayload);

            //APN高级推送
            APNPayload apnpayload = new APNPayload();
            DictionaryAlertMsg alertMsg = new DictionaryAlertMsg();
            alertMsg.Body = "Body";
            alertMsg.ActionLocKey = "ActionLocKey";
            alertMsg.LocKey = content;
            alertMsg.addLocArg("LocArg");
            alertMsg.LaunchImage = "LaunchImage";
            //IOS8.2支持字段
            alertMsg.Title = "Title";
            alertMsg.TitleLocKey = title;
            alertMsg.addTitleLocArg("TitleLocArg");
            apnpayload.AlertMsg = alertMsg;
            apnpayload.Badge = 10;
            //apnpayload.ContentAvailable = 1;
            //apnpayload.Category = "";
            apnpayload.Sound = "test1.wav";
            apnpayload.addCustomMsg("payload", jsonContent);
            template.setAPNInfo(apnpayload);


            //设置客户端展示时间
            //String begin = "2015-03-06 14:28:10";
            //String end = "2015-03-06 14:38:20";
            //template.setDuration(begin, end);

            return template;
        }
        #endregion

        #region 测试使用模板
        /// <summary>
        ///  用于普通发送个推信息
        /// </summary>
        /// <returns></returns>
        public static NotificationTemplate NotificationTemplateDemo()
        {
            NotificationTemplate template = new NotificationTemplate();
            template.AppId = APPID;
            template.AppKey = APPKEY;
            template.Title = "lm在测试上传";         //通知栏标题
            template.Text = "lm在测试上传";          //通知栏内容
            template.Logo = "";                      //通知栏显示本地图片
            template.LogoURL = "";                   //通知栏显示网络图标

            template.TransmissionType = "1";          //应用启动类型，1：强制应用启动  2：等待应用启动
            template.TransmissionContent = "请填写透传内容";   //透传内容

            //设置客户端展示时间
            //String begin = "2015-03-06 14:36:10";
            //String end = "2015-03-06 14:46:20";
            //template.setDuration(begin, end);

            template.IsRing = true;                //接收到消息是否响铃，true：响铃 false：不响铃
            template.IsVibrate = true;               //接收到消息是否震动，true：震动 false：不震动
            template.IsClearable = true;             //接收到消息是否可清除，true：可清除 false：不可清除
            return template;
        }
        #endregion

        private void Form1_Load(object sender, EventArgs e)
        {
            Environment.SetEnvironmentVariable("needDetails", "true");
            TimingPush();
        }

        public void TimingPush() 
        {
            //获取数据库中所有等待推送的数据
            List<PushMessageInfo> pushMessageInfoList= MobilePushBLL.Instance.MobilePush_GetList();
            for (int i = 0; i < pushMessageInfoList.Count; i++)
            {
                PushMessageInfo pushMessageInfo = pushMessageInfoList[i];
                try
                {
                    //推送
                    if (pushMessageInfo.PushType == "app")
                    {
                        pushMessageToApp(pushMessageInfo);
                    }
                    else
                    {
                        PushMessageToList(pushMessageInfo);
                    }
                    pushMessageInfo.Status = 1;
                }
                catch 
                {
                    //推送异常,数据推pushCount计数
                    pushMessageInfo.Status = 0;
                }
                pushMessageInfo.PushCount += 1;
                bool result=MobilePushBLL.Instance.UpdateMobilePush(pushMessageInfo);
                if (!result) 
                {
                    this.notifyIcon1.Visible = true;
                    this.notifyIcon1.ShowBalloonTip(5, "提示", "无法连接至远程数据库", ToolTipIcon.Info);
                }
            }

            this.notifyIcon1.Visible = true;
            this.notifyIcon1.ShowBalloonTip(2, "提示", "执行完毕！，正在关闭进程", ToolTipIcon.Info);
            this.Close();
        }

        private void MainForm_SizeChanged(object sender, EventArgs e)
        {
            if (WindowState == FormWindowState.Minimized)
            {
                this.Hide();
                this.notifyIcon1.Visible = true;
                this.notifyIcon1.ShowBalloonTip(10, "提示", "推送程序已在后台执行", ToolTipIcon.Info);
                this.Visible = false;
                this.notifyIcon1.Visible = true;
                this.notifyIcon1.Text = "金象推送后台程序";
            }
        }

        private void notifyIcon1_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            this.Visible = true;
            this.WindowState = FormWindowState.Normal;
        }

        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            this.notifyIcon1.Visible = false;
            this.notifyIcon1.Dispose();
        }

        private void OutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("是否确认退出程序？", "退出", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
            {
                this.Dispose();
                this.Close();
            }
        }
    }
}
