using JXAPI.Component.DataAccess;
using JXAPI.Component.Model;
using log4net;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;

namespace JXAPI.Component.SQLServerDAL
{
    public class ProductActivityMySqlDAL
    {
        private static Database dbw = JXActivityMySqlData.Writer;
        private static Database dbr = JXActivityMySqlData.Reader;
        private ILog myLog = log4net.LogManager.GetLogger(typeof(ProductActivityMySqlDAL));

        #region MySql 单品活动信息表相关操作


        /// <summary>
        /// 查询单品活动库最大ID
        /// </summary>
        /// <returns></returns>
        public int GetMaxProductActivityID()
        {
            int maxId = 0;
            try
            {
                string sqlCommand = "select * from productactivity order by ProductID DESC limit 0, 1";
                var cmd = dbr.GetSqlStringCommand(sqlCommand);
                if (dbr.ExecuteScalar(cmd).IsNotNULL())
                {
                    maxId = Convert.ToInt32(dbr.ExecuteScalar(cmd));
                }
                else
                {
                    maxId = 0;
                }
            }
            catch (Exception ex)
            {
                myLog.ErrorFormat("GetMaxProductActivityID 获取商品最大ID失败,异常信息:{0}", ex.Message);
                maxId = -1;
            }
            return maxId;
        }

        /// <summary>
        /// 更新单品活动
        /// </summary>
        /// <param name="productTable"></param>
        /// <param name="errorCount"></param>
        /// <returns></returns>
        public bool UpdateProductActivity(DataTable productTable, out int errorCount)
        {
            var flag = true;
            errorCount = 0;
            try
            {
                string strPlaceholder = string.Empty;
                StringBuilder sqlCommand = new StringBuilder();
                sqlCommand.Append("replace into productactivity ( " + parmsKey + " ) values ");
                for (int i = 0; i < productTable.Rows.Count; i++)
                {
                    var dr = productTable.Rows[i];
                    var Placeholder = string.Format(@"({0},{1},'{2}',{3},{4},{5},'{6}',{7},{8},'{9}','{10}',{11},{12},{13},'{14}',
                                                      {15},'{16}','{17}','{18}','{19}','{20}','{21}','{22}',{23},{24},{25},{26})",
                                    dr["ProductID"].ToInt(), dr["ActID"].ToInt(), dr["ActName"].ToString().Replace("\'", "\""), dr["ActStock"].ToInt()
                                    , dr["ActQuantity"].ToInt(), dr["ActPrice"].ToDecimal(), dr["ActDesc"].ToString().Replace("\'", "\""), dr["Type"].ToShort(), dr["TypeLimit"].ToShort(), dr["CouponBatchNo"].ToString().Replace("\'", "\"")
                                    , dr["CouponName"].ToString().Replace("\'", "\""), dr["Discount"].ToDecimal(), dr["ProductGiftID"].ToInt(), dr["IsFreeShip"].ToShort()
                                    , dr["ExtType"].ToString().Replace("\'", "\""), dr["Status"].ToShort(), dr["StartDate"].ToDateTime().ToString(), dr["EndDate"].ToDateTime().ToString(), dr["Creator"].ToString().Replace("\'", "\"")
                                    , dr["CreateTime"].ToDateTime().ToString(), dr["Updater"].ToString().Replace("\'", "\""), dr["UpdateTime"].ToDateTime().ToString()
                                    , dr["ProductCode"].ToString(), dr["MarketPrice"].ToDecimal(), dr["TradePrice"].ToDecimal() < 0 ? 0 : dr["TradePrice"].ToDecimal(), dr["MobilePrice"].ToDecimal(), dr["CostPrice"].ToDecimal());
                    if (i == 0)
                    {
                        strPlaceholder = Placeholder;
                    }
                    else
                    {
                        strPlaceholder += "," + Placeholder;
                    }
                }
                if (!string.IsNullOrEmpty(strPlaceholder))
                {
                    sqlCommand.Append(strPlaceholder);
                    var cmd = dbw.GetSqlStringCommand(sqlCommand.ToString());
                    var result = dbw.ExecuteNonQuery(cmd);
                    if (result <= 0)
                    {
                        errorCount = productTable.Rows.Count;
                        flag = false;
                    }
                    else
                    {
                        errorCount = (productTable.Rows.Count - result > 0) ? productTable.Rows.Count - result : 0;
                        if (errorCount == 0)
                        {
                            flag = true;
                        }
                        else
                        {
                            flag = false;
                        }  
                    }
                }
            }
            catch (Exception ex)
            {
                myLog.ErrorFormat("UpdateProductActivity 更新单品活动表失败,单品活动ID：{0}-{1},异常信息:{2}", productTable.Rows[0]["ProductID"], productTable.Rows[productTable.Rows.Count - 1]["ProductID"], ex.Message);
                flag = false;
            }
            return flag;
        }

        /// <summary>
        /// 添加单品活动
        /// </summary>
        /// <param name="productTable"></param>
        /// <param name="errorCount"></param>
        /// <returns></returns>
        public bool AddProductActivity(DataTable productTable, out int errorCount)
        {
            var flag = true;
            errorCount = 0;
            try
            {
                string strPlaceholder = string.Empty;
                StringBuilder sqlCommand = new StringBuilder();
                sqlCommand.Append("insert into productactivity ( " + parmsKey + " ) values ");
                for (int i = 0; i < productTable.Rows.Count; i++)
                {
                    var dr = productTable.Rows[i];
                    var Placeholder = string.Format(@"({0},{1},'{2}',{3},{4},{5},'{6}',{7},{8},'{9}','{10}',{11},{12},{13},'{14}',
                                                      {15},'{16}','{17}','{18}','{19}','{20}','{21}','{22}',{23},{24},{25},{26})",
                                     dr["ProductID"].ToInt(), dr["ActID"].ToInt(),dr["ActName"].ToString().Replace("\'", "\""), dr["ActStock"].ToInt()
                                     , dr["ActQuantity"].ToInt(), dr["ActPrice"].ToDecimal(), dr["ActDesc"].ToString().Replace("\'", "\""), dr["Type"].ToShort(), dr["TypeLimit"].ToShort(), dr["CouponBatchNo"].ToString().Replace("\'", "\"")
                                     , dr["CouponName"].ToString().Replace("\'", "\""), dr["Discount"].ToDecimal(), dr["ProductGiftID"].ToInt(), dr["IsFreeShip"].ToShort()
                                     , dr["ExtType"].ToString().Replace("\'", "\""), dr["Status"].ToShort(), dr["StartDate"].ToDateTime().ToString(), dr["EndDate"].ToDateTime().ToString(), dr["Creator"].ToString().Replace("\'", "\"")
                                     , dr["CreateTime"].ToDateTime().ToString(),dr["Updater"].ToString().Replace("\'", "\""), dr["UpdateTime"].ToDateTime().ToString()
                                     , dr["ProductCode"].ToString(), dr["MarketPrice"].ToDecimal(), dr["TradePrice"].ToDecimal() < 0 ? 0 : dr["TradePrice"].ToDecimal(), dr["MobilePrice"].ToDecimal(), dr["CostPrice"].ToDecimal());
                    if (i == 0)
                    {
                        strPlaceholder = Placeholder;
                    }
                    else
                    {
                        strPlaceholder += "," + Placeholder;
                    }
                }
                if (!string.IsNullOrEmpty(strPlaceholder))
                {
                    sqlCommand.Append(strPlaceholder);
                    var cmd = dbw.GetSqlStringCommand(sqlCommand.ToString());
                    var result = dbw.ExecuteNonQuery(cmd);
                    if (result <= 0)
                    {
                        errorCount = productTable.Rows.Count;
                        flag = false;
                    }
                    else
                    {
                        errorCount = (productTable.Rows.Count - result > 0) ? productTable.Rows.Count - result : 0;
                        if (errorCount == 0)
                        {
                            flag = true;
                        }
                        else
                        {
                            flag = false;
                        }  
                    }
                }
            }
            catch (Exception ex)
            {
                myLog.ErrorFormat("AddProductActivity 添加单品活动失败,单品活动ID：{0}-{1},异常信息:{2}", productTable.Rows[0]["ProductID"], productTable.Rows[productTable.Rows.Count - 1]["ProductID"], ex.Message);
                flag = false;
            }
            return flag;
        }

        private string parmsKey = string.Format(@"ProductID,ActID,ActName, ActStock,ActQuantity,ActPrice,
                          ActDesc,Type,TypeLimit,CouponBatchNo,CouponName,Discount,ProductGiftID,
                          IsFreeShip,ExtType,Status,StartDate,EndDate,Creator,CreateTime,Updater,UpdateTime,
                          ProductCode,MarketPrice,TradePrice,MobilePrice,CostPrice");

        #endregion
    }
}
